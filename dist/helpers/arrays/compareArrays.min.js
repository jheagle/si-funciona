"use strict";require("core-js/modules/es.array.from.js"),require("core-js/modules/es.array.slice.js"),require("core-js/modules/es.function.name.js"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,require("core-js/modules/es.array.map.js"),require("core-js/modules/es.array.concat.js"),require("core-js/modules/es.symbol.js"),require("core-js/modules/es.symbol.description.js"),require("core-js/modules/es.object.to-string.js"),require("core-js/modules/es.symbol.iterator.js"),require("core-js/modules/es.array.iterator.js"),require("core-js/modules/es.string.iterator.js"),require("core-js/modules/web.dom-collections.iterator.js"),require("core-js/stable");const _isObject=_interopRequireDefault(require("../objects/isObject")),_mergeArrays=_interopRequireDefault(require("./mergeArrays")),_objectKeys=_interopRequireDefault(require("../objects/objectKeys"));function _interopRequireDefault(r){return r&&r.__esModule?r:{default:r}}function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,e){if(!r)return;if("string"==typeof r)return _arrayLikeToArray(r,e);let t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,e):void 0}function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,e){(null==e||e>r.length)&&(e=r.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=r[t];return o}function _typeof(r){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof(r)}const compareArrays=function r(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return _mergeArrays.default.apply(void 0,t).reduce((function(e,o){const n=_typeof(o),u=Array.isArray(o),a=t.map((function(e){return e.reduce((function(e,t,a){const s=_typeof(t);if(n!==s)return e;if(!(0,_isObject.default)(o))return t===o?[].concat(_toConsumableArray(e),[a]):e;if(u!==Array.isArray(t))return e;return(u?r(o,t):r((0,_objectKeys.default)(o),(0,_objectKeys.default)(t))).every((function(r){return r.result.every((function(r){return 0===r}))}))?[].concat(_toConsumableArray(e),[a]):e}),[])})),s=a.map((function(r){return r.length?1:-1}));return[].concat(_toConsumableArray(e),[{value:o,keys:a,result:s.every((function(r){return 1===r}))?s.map((function(r){return 0})):s}])}),[])},_default=compareArrays;exports.default=_default;