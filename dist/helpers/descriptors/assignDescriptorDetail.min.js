"use strict";require("core-js/modules/es.symbol.js"),require("core-js/modules/es.symbol.description.js"),require("core-js/modules/es.symbol.iterator.js"),require("core-js/modules/es.array.iterator.js"),require("core-js/modules/es.string.iterator.js"),require("core-js/modules/web.dom-collections.iterator.js"),require("core-js/modules/es.array.from.js"),require("core-js/modules/es.array.slice.js"),require("core-js/modules/es.function.name.js"),require("core-js/modules/es.regexp.exec.js"),require("core-js/modules/es.regexp.test.js"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,require("core-js/modules/es.object.to-string.js"),require("core-js/modules/esnext.async-iterator.reduce.js"),require("core-js/modules/esnext.iterator.constructor.js"),require("core-js/modules/esnext.iterator.reduce.js"),require("core-js/modules/es.array.concat.js"),require("core-js/modules/es.array.find.js"),require("core-js/modules/esnext.async-iterator.find.js"),require("core-js/modules/esnext.iterator.find.js"),require("core-js/stable");const _cloneDescriptorDetail=_interopRequireDefault(require("./cloneDescriptorDetail")),_uniqueArray=_interopRequireDefault(require("../arrays/uniqueArray"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){if(!e)return;if("string"==typeof e)return _arrayLikeToArray(e,r);let t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,r):void 0}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,o=new Array(r);t<r;t++)o[t]=e[t];return o}const assignDescriptorDetail=function(e){for(var r=arguments.length,t=new Array(r>1?r-1:0),o=1;o<r;o++)t[o-1]=arguments[o];return t.reduce((function(e,r){return e.type=(0,_uniqueArray.default)([].concat(_toConsumableArray(e.type),_toConsumableArray(r.type))),e.value=(0,_uniqueArray.default)([].concat(_toConsumableArray(e.value),_toConsumableArray(r.value))),e.nullable=e.nullable||r.nullable,e.optional=e.optional||r.optional,e.circular=e.circular||r.circular,e.isReference=e.isReference||r.isReference,e.isInstance=e.isInstance||r.isInstance,e.arrayReference=[e.arrayReference,r.arrayReference].find((function(e){return"number"==typeof e})),e.objectReference=[e.objectReference,r.objectReference].find((function(e){return"number"==typeof e})),e.arrayReference=void 0===e.arrayReference?null:e.arrayReference,e.objectReference=void 0===e.objectReference?null:e.objectReference,e}),(0,_cloneDescriptorDetail.default)(e))},_default=assignDescriptorDetail;exports.default=_default;